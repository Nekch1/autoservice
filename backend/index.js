require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const cookieParser = require('cookie-parser');
const sequelize = require('./config/db');
require('./models/associations')
const seedService = require('./seed/service-seed')

const app = express();
const PORT = process.env.PORT || 5000;

// üì¶ –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const carRoutes = require('./routes/cars');
const serviceRoutes = require('./routes/services');
const orderRoutes = require('./routes/orders');
const orderServiceRoutes = require('./routes/orderServices');
// const questionRoutes = require('./routes/questions');

// üîê Middleware
app.use(cookieParser());
app.use(cors({ 
  origin: 'http://localhost:3000',
  credentials: true 
}));
app.use(express.json());

// üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç.–¥.)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// üåê –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/auth', authRoutes);
app.use('/users', userRoutes);
app.use('/cars', carRoutes);
app.use('/services', serviceRoutes);
app.use('/orders', orderRoutes);
app.use('/order-services', orderServiceRoutes);
// app.use('/questions', questionRoutes); // –≤–∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

// ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –¥–æ—Å—Ç—É–ø –∫ –º–∞—à–∏–Ω–∞–º —á–µ—Ä–µ–∑ /users/:userId/cars
app.use('/users/:userId/cars', (req, res, next) => {
  req.originalUrl = req.originalUrl.replace(`/users/${req.params.userId}/cars`, '/cars');
  carRoutes(req, res, next);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function start() {
  try {
    await sequelize.authenticate();
    await sequelize.sync(); // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ { alter: true } –∏–ª–∏ { force: true } –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    await seedService();
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
  }
}

start();
