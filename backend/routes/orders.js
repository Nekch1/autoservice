const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const OrderService = require('../models/OrderService');
const { Op } = require('sequelize');
const nodemailer = require('nodemailer');
const User = require('../models/User')
const Car = require('../models/Car')
const Service = require('../models/Service')
const auth = require('../middleware/auth');

router.use(auth);
router.get('/', async (req, res) => {
  try {
    const { userId, page = 1, limit = 10 } = req.query;
    const offset = (page - 1) * limit;

    const where = userId ? { user_id: userId } : {};

    const orders = await Order.findAndCountAll({
      where,
      limit: parseInt(limit),
      offset: parseInt(offset),
      distinct:true,
      include: [
        { model: User, as: 'User'},  
        { model: Car, as:'Car' },
        { model: Service, as:'Service' },
      ],
      order: [['createdAt', 'DESC']],
    });
    console.log(orders)    
    const totalPages = orders.count === 0 ? 1 : Math.ceil(orders.count / limit);

    res.json({
      total: orders.count,
      pages: totalPages,
      currentPage: parseInt(page),
      data: orders.rows,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id, {
      include: ['User', 'Car', 'Service'],
    });

    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(order);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { user_id, car_id, services, order_date, order_time, email, status, price } = req.body;

    if (!user_id || !car_id || !services || !order_date || !email) {
      return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    const order = await Order.create({
      user_id,
      car_id,
      order_date,
      order_time,
      email,
      status: '–æ–∂–∏–¥–∞–Ω–∏–µ',
      price
    });

    const links = services.map(service_id => ({
      order_id: order.id,
      service_id,
    }));
    await OrderService.bulkCreate(links);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –ø–æ –∏—Ö ID
    const serviceList = await Service.findAll({
      where: {
        id: services
      }
    });

    const serviceNames = serviceList.map(s => s.name).join(', ');

    // ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ email-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: "nstrukov876@gmail.com",
        pass: "niof cvck wsos dfqk"
      },
    });

    const message = {
      from: "nstrukov876@gmail.com",
      to: email,
      subject: '–ó–∞–ø–∏—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å',
      text: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏: ${serviceNames}.\n–î–∞—Ç–∞: ${order_date}\n–í—Ä–µ–º—è: ${order_time}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
    };

    await transporter.sendMail(message);

    res.status(201).json({ success: true, order_id: order.id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
router.put('/:id', async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id, {
      include: [{ model: Service, as: 'Service' }]
    });

    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const oldStatus = order.status;
    await order.update(req.body);

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    if (req.body.status && req.body.status !== oldStatus) {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: "nstrukov876@gmail.com",
          pass: "niof cvck wsos dfqk"
        },
      });

      const serviceNames = order.Service.map(s => s.name).join(', ');

      const message = {
        from: "nstrukov876@gmail.com",
        to: order.email,
        subject: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
        text: `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id} –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω.\n\n` +
              `–£—Å–ª—É–≥–∏: ${serviceNames}\n–î–∞—Ç–∞: ${order.order_date}\n–í—Ä–µ–º—è: ${order.order_time}\n` +
              `–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${req.body.status}`,
      };

      await transporter.sendMail(message);
    }

    res.json({ success: true });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});


// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Order.destroy({ where: { id: req.params.id } });

    if (!deleted) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    res.json({ success: true });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});


// üîπ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
router.put('/:id/cancel', async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);

    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äì –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è
    if (order.status === '–∑–∞–≤–µ—Ä—à—ë–Ω') {
      return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑' });
    }

    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–º–µ–Ω—ë–Ω"
    order.status = '–æ—Ç–º–µ–Ω—ë–Ω';
    await order.save();

    res.json({ success: true, message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞' });
  }
});


module.exports = router;
